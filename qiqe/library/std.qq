# STD Library Qiqe
# This is a library of functions and values used in the Qiqe programming language.
# This library is imported by default in all Qiqe programs.

# Basic
let id = \x. x
let const' = \x y. x
let flip = \f x y. f y x

# Booleans
let and = eval "(x)=>(y)=>(x && y)"
let or = eval "(x)=>(y)=>(x || y)"
let not = eval "(x)=>(!x)"

# Arithmetic
let add = eval "(x)=>(y)=>(x + y)"
let sub = eval "(x)=>(y)=>(x - y)"
let mul = eval "(x)=>(y)=>(x * y)"
let div = eval "(x)=>(y)=>(x / y)"
let mod = eval "(x)=>(y)=>(x % y)"
let pow = eval "(x)=>(y)=>(x ** y)"
let succ = add 1
let pred = (flip sub) 1
let max = \x y. if gt x y then x else y
let min = \x y. if lt x y then x else y

# Comparison
let eq = eval "(x)=>(y)=>(x === y)"
let neq = not >> eq
let lt = eval "(x)=>(y)=>(x < y)"
let gt = eval "(x)=>(y)=>(x > y)"
let lte = \x y. or (lt x y) (eq x y)
let gte = \x y. or (gt x y) (eq x y)

# String
let show = eval "(x)=>(x.toString())"
let concat = eval "(x)=>(y)=>(x + y)"
let length = eval "(x)=>(x.length)"
let to_upper = eval "(x)=>(x.toUpperCase())"
let to_lower = eval "(x)=>(x.toLowerCase())"
let trim = eval "(x)=>(x.trim())"
let split = eval "(x)=>(y)=>(x.split(y))"
let join = eval "(x)=>(y)=>(x.join(y))"

# Basic 
let odd = \n. eq (mod n 2) 0
let even = not << odd

# Repeat a string n times
# @param str: string to repeat
# @param n: number of times to repeat
# @return: string
let repeat_str = \str n. if lte n 1 
    then str
    else concat str (repeat_str str (sub n 1))

# Right align a string with a given character
# @param s: string to align
# @param n: length of the aligned string
# @param c: character to use for alignment
# @return: aligned string 
let left_align = \s n c. concat (repeat_str c n) s

# Right align a string with spaces
# @param s: string to align
# @param n: length of the aligned string
# @return: aligned string
let left_align' = \s n. left_align s n " "

# Right align a string with a given character
# @param s: string to align
# @param n: length of the aligned string
# @param c: character to use for alignment
# @return: aligned string
let right_align = \s n c. concat s (repeat_str c n)

# Right align a string with spaces
# @param s: string to align
# @param n: length of the aligned string
# @return: aligned string
let right_align' = \s n. right_align s n " "

# Logging
let debug = show >> (\x. x |> eval "(x)=>{println__qq('DEBUG: ' + x);return x}")
let info  = show >> (\x. x |> eval "(x)=>{println__qq('INFO: '  + x);return x}")
let warn  = show >> (\x. x |> eval "(x)=>{println__qq('WARN: '  + x);return x}")
let error = show >> (\x. x |> eval "(x)=>{println__qq('ERROR: ' + x);return x}")


