# Odd number
# @param n: Number to check
# @return: True if n is odd, false otherwise
let odd = \n. eq (mod n 2) 0

# Even number
# @param n: Number to check
# @return: True if n is even, false otherwise
let even = not << odd

# Factorial
# @param n: Number to calculate the factorial of
# @return: Factorial of n
let factorial = \n. if eq n 0 then 1 else foldl1 mul (range' 1 n)

# Repeat a string n times
# @param str: String to repeat
# @param n: Number of times to repeat
# @return: Repeated string
let repeat_str = \str n. if lte n 1 then str else concat str (repeat_str str (sub n 1))

# Intercalate a list of strings with a separator
# @param l: List of strings
# @param c: Separator
# @return: Intercalated string
let intercalate = \l c. foldl1 (\acc x. concat (concat acc (show c)) x) l 

let binomial_coefficient = \n k. 
    div (factorial n) (mul (factorial k) (factorial (sub n k)))

let pascal_triangle = \l.
    for_each (range'' l) (\n. 
        for_each (range'' n) (binomial_coefficient n)
        )

let sierpinski_triangle = \n. 
    for_each (pascal_triangle n) (map (\a_k. if even a_k then "â–²" else " "))

let print_sierpinski_triangle =  \n.
    map (foldl1 concat) (sierpinski_triangle n)
    |> map (\line. concat (repeat_str " " (succ (sub n (length line)))) line)
    |> flip intercalate "\n"
    |> print

print_sierpinski_triangle 5
