let binomial_coefficient = \n k. 
    div (factorial n) 
        (mul (factorial k) (factorial (sub n k)))

let pascal_triangle = \size.
    for_each (range'' size) (\n. 
        for_each (range'' n) (\k. 
            binomial_coefficient n k
        )
    )

let sierpinski_triangle = \size. 
    for_each (pascal_triangle size) (\row. 
        for_each row (\coefficient. 
            if even coefficient then "â–² " else "  "
        )
    )

let print_sierpinski_triangle = \n.
    map (foldl1 concat) (sierpinski_triangle n)
    |> map (\line. left_align' line (pred (sub (div (length line) 2) (succ n))))
    |> flip intercalate "\n"
    |> println

print_sierpinski_triangle 25







let odd = \n. eq (mod n 2) 0
let even = not << odd
let factorial = \n. 
    if eq n 0 then 1 else foldl1 mul (range' 1 n)
let repeat_str = \str n. if lte n 1 
    then str
    else concat str (repeat_str str (sub n 1))
    
let left_align = \s n c. concat (repeat_str c n) s
let left_align' = \s n. left_align s n " "
    
let intercalate = \l c. 
    foldl1 (\acc x. concat (concat acc (show c)) x) l 


